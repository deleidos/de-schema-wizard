package com.deleidos.dp.h2;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import com.deleidos.dp.beans.BinaryDetail;
import com.deleidos.dp.beans.DataSample;
import com.deleidos.dp.beans.DataSampleMetaData;
import com.deleidos.dp.beans.Detail;
import com.deleidos.dp.beans.NumberDetail;
import com.deleidos.dp.beans.Profile;
import com.deleidos.dp.beans.Schema;
import com.deleidos.dp.beans.SchemaMetaData;
import com.deleidos.dp.beans.StringDetail;
import com.deleidos.dp.exceptions.H2DataAccessException;
import com.deleidos.hd.h2.H2Database;

/**
 * Data access object to persist and retrieve schemas, samples, and metrics from
 * the H2 server.
 * 
 * @author leegc
 * @author yoonj1
 *
 */
public class H2DataAccessObject {
	public static final Logger logger = Logger.getLogger(H2DataAccessObject.class);
	private H2Database h2Database;
	private boolean isLive;
	protected static H2DataAccessObject h2Dao = null;
	private H2MetricsDataAccessObject h2Metrics;
	private H2SampleDataAccessObject h2Samples;
	private H2SchemaDataAccessObject h2Schema;
	public static final boolean debug = false;

	private H2DataAccessObject(H2Database h2Database) {
		this.h2Database = h2Database;
		h2Metrics = new H2MetricsDataAccessObject(this);
		h2Samples = new H2SampleDataAccessObject(this);
		h2Schema = new H2SchemaDataAccessObject(this);
	}

	/**
	 * Get or instantiate the static instance of the H2 Data Access Object.
	 * 
	 * @return The static H2DataAccessObject
	 * @throws H2DataAccessException
	 * @throws IOException
	 */
	public static H2DataAccessObject getInstance() throws H2DataAccessException {
		if (h2Dao == null) {
			try {
				h2Dao = new H2DataAccessObject(new H2Database());
			} catch (IOException e) {
				logger.error("Could not find configuration file.");
				logger.error(e);
			}
		}
		return h2Dao;
	}

	public static H2DataAccessObject setInstance(H2Database database) throws H2DataAccessException {
		h2Dao = new H2DataAccessObject(database);
		return h2Dao;
	}

	/**
	 * Remove all files in the database directory with the database name.
	 */
	public void purge() {
		h2Database.purge();
	}

	/**
	 * Return the generated key from a statement (H2 only allows a maximum of
	 * one to be returned per query). Calling this method will not execute the
	 * statement.
	 * 
	 * @param stmt
	 *            The executed statement
	 * @return The key generated by executing this statement
	 * @throws SQLException
	 *             Thrown if there is an error in the query.
	 */
	public static int getGeneratedKey(Statement stmt) throws SQLException {
		ResultSet gKeys = stmt.getGeneratedKeys();
		if (gKeys.next()) {
			int fieldId = gKeys.getInt(1);
			stmt.close();
			return fieldId;
		} else {
			throw new SQLException("Unable to get generated key from statement " + stmt.toString());
		}
	}

	/**
	 * Run a query in H2.
	 * 
	 * @param sql
	 *            The string of the SQL query.
	 * @return The result set from executing this query.
	 * @throws SQLException
	 *             Thrown if there is an error in the query.
	 */
	public ResultSet query(Connection dbConnection, String sql) throws SQLException {
		if (debug) {
			return queryWithOutput(dbConnection, sql);
		} else {
			ResultSet rs = dbConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)
					.executeQuery(sql);
			dbConnection.close();
			return rs;
		}
	}

	/**
	 * Run a query in H2 and log the output at the debug level.
	 * 
	 * @param sql
	 *            The string of the SQL query. It is the callers job to close
	 *            the conneciton.
	 * @return The result set from executing this query.
	 * @throws SQLException
	 *             Thrown if there is an error in the query.
	 */
	public ResultSet queryWithOutput(Connection dbConnection, String sql) throws SQLException {
		ResultSet rs = query(dbConnection, sql);
		ResultSetMetaData rsmd = rs.getMetaData();
		int c = rsmd.getColumnCount();
		StringBuilder sb = new StringBuilder();
		logger.info(sql);
		for (int i = 1; i <= c; i++) {
			sb.append(rsmd.getColumnName(i) + "\t");
		}
		logger.info(sb);
		while (rs.next()) {
			StringBuilder s = new StringBuilder();
			for (int i = 1; i <= c; i++) {
				s.append(rs.getString(i) + "\t");
			}
			logger.info(s.toString());
		}
		rs.beforeFirst();
		dbConnection.close();
		return rs;
	}

	/**
	 * Add a sample
	 * 
	 * @param sample
	 *            the DataSample bean to be added
	 * @throws H2DataAccessException
	 */
	public String addSample(DataSample sample) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			connection.setAutoCommit(false);
			try {
				String resultingGuid = h2Samples.addSample(connection, sample);
				connection.commit();
				return resultingGuid;
			} catch (H2DataAccessException | SQLException e) {
				connection.rollback();
				throw e;
			} finally {
				connection.close();
			}
		} catch (Exception e) {
			logger.error("Error adding sample.");
			throw new H2DataAccessException("Error adding sample.");
		}
	}

	/**
	 * Add a schema to H2.
	 * 
	 * @param schemaBean
	 *            the schema object as a bean
	 * @return The guid of the schema
	 * @throws H2DataAccessException
	 */
	public String addSchema(Schema schemaBean) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			connection.setAutoCommit(false);
			try {
				String guid = h2Schema.addSchema(connection, schemaBean);
				connection.commit();
				return guid;
			} catch (H2DataAccessException | SQLException e) {
				connection.rollback();
				throw e;
			} finally {
				connection.close();
			}
		} catch (Exception e) {
			logger.error("Error adding schema.");
			throw new H2DataAccessException("Error adding schema.");
		}
	}

	/**
	 * Get a list of the schema meta data in H2
	 * 
	 * @return a list of SchemaMetaData beans
	 * @throws H2DataAccessException
	 */
	public List<SchemaMetaData> getAllSchemaMetaData() throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			List<SchemaMetaData> schemaMetaData = h2Schema.getAllSchemaMetaData(connection);
			connection.close();
			return schemaMetaData;
		} catch (SQLException e) {
			logger.error("Error retrieving all schema meta data.");
			throw new H2DataAccessException("Error retrieving all schema meta data.");
		} catch (Exception e) {
			logger.error("An unexpected error occured retrieving all schema meta data.");
			throw new H2DataAccessException("Error retrieving all schema meta data.");
		}
	}

	/**
	 * Get a list of the sample meta data in H2
	 * 
	 * @return a list of SampleMetaDataBeans
	 * @throws H2DataAccessException
	 */
	public List<DataSampleMetaData> getAllSampleMetaData() throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			List<DataSampleMetaData> dsMetaData = h2Samples.getAllSampleMetaData(connection);
			connection.close();
			return dsMetaData;
		} catch (SQLException e) {
			logger.error("Error retrieving all sample meta data.");
			throw new H2DataAccessException("Error retrieving all sample meta data.");
		}
	}

	/**
	 * Get a specific schema meta data object by its GUID
	 * 
	 * @param guid
	 *            the desired guid
	 * @return the SchemaMetaData bean that coincides with the GUID
	 * @throws H2DataAccessException
	 */
	public SchemaMetaData getSchemaMetaDataByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			SchemaMetaData schemaMetaData = new SchemaMetaData();
			schemaMetaData = h2Schema.getSchemaMetaDataByGuid(connection, guid);
			connection.close();
			return schemaMetaData;
		} catch (SQLException e) {
			logger.error("SQL error deleting schema metadata with guid " + guid + ".");
			throw new H2DataAccessException("SQL error deleting schema metadata with guid " + guid + ".");
		}

	}

	/**
	 * Get a schema by its guid
	 * 
	 * @param guid
	 *            the schema's guid
	 * @param showHistogram
	 *            true if histogram data should be displayed, false if it should
	 *            be removed
	 * @return the Schema bean
	 * @throws H2DataAccessException
	 */
	public Schema getSchemaByGuid(String guid, boolean showHistogram) throws H2DataAccessException {
		if (guid == null) {
			return null;
		}
		try {
			Connection connection = h2Database.getNewConnection();
			Schema schema = h2Schema.getSchemaByGuid(connection, guid);

			if (!showHistogram) {
				for (String key : schema.getsProfile().keySet()) {
					Profile profile = schema.getsProfile().get(key);
					Detail detail = profile.getDetail();
					if (detail instanceof NumberDetail) {
						NumberDetail nm = ((NumberDetail) Profile.getNumberDetail(profile));
						nm.setFreqHistogram(null);
					} else if (detail instanceof StringDetail) {
						StringDetail sm = ((StringDetail) Profile.getStringDetail(profile));
						sm.setTermFreqHistogram(null);
					} else if (detail instanceof BinaryDetail) {
						logger.error("Detected as binary in " + getClass().getName() + ".");
					}
					profile.setDetail(detail);
				}
			}
			connection.close();
			return schema;
		} catch(SQLException e) {
			logger.error("SQL error getting schema with guid "+guid+". ");
			logger.error(e.getMessage());
			throw new H2DataAccessException("SQL error getting schema with guid "+guid+".");
		}
	}

	/**
	 * Gets the field-descriptor
	 * 
	 * @param guid
	 *            The Schema's Guid
	 * @param showHistogram
	 *            True if histogram data should be displayed; False if it should
	 *            be removed
	 * @return
	 * @throws H2DataAccessException
	 */
	public Map<String, Profile> getSchemaFieldByGuid(String guid, boolean showHistogram) throws H2DataAccessException {

		try {
			Connection connection = h2Database.getNewConnection();
			Map<String, Profile> map = new HashMap<String, Profile>();
			map = h2Schema.getSchemaFieldByGuid(connection, guid);

			if (!showHistogram) {
				for (String key : map.keySet()) {
					Profile profile = map.get(key);
					Detail detail = profile.getDetail();
					if (detail instanceof NumberDetail) {
						NumberDetail nm = ((NumberDetail) Profile.getNumberDetail(profile));
						nm.setFreqHistogram(null);
					} else if (detail instanceof StringDetail) {
						StringDetail sm = ((StringDetail) Profile.getStringDetail(profile));
						sm.setTermFreqHistogram(null);
					} else if (detail instanceof BinaryDetail) {
						logger.error("Detected as binary in " + getClass().getName() + ".");
					}
					profile.setDetail(detail);
				}
			}
			connection.close();
			return map;
		} catch (SQLException e) {
			logger.error("SQL error getting schema fields for guid " + guid + ".");
			throw new H2DataAccessException("SQL error getting schema fields for guid " + guid + ".");
		}
	}

	/**
	 * Delete schema based on its guid
	 * 
	 * @param guid
	 * @throws H2DataAccessException
	 */
	public void deleteSchemaFromDeletionQueue(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			logger.info("Deleting schema " + guid + " from database.");
			h2Schema.deleteSchemaFromDeletionQueue(connection, guid);
			connection.close();
		} catch (SQLException e) {
			logger.error("SQL error deleting schema with guid " + guid + ".");
			throw new H2DataAccessException("SQL error deleting schema with guid " + guid + ".");
		}
	}

	/**
	 * Call underlying H2SampleDAO class to retrieve a mapping of all the sample
	 * names to their respective media types in the database.
	 * 
	 * @return
	 * @throws H2DataAccessException
	 */
	public Map<String, String> getExistingSampleNames(Connection dbConnection) throws H2DataAccessException {
		try {
			Map<String, String> existingSampleNames = h2Samples.getExistingSampleNames(dbConnection);
			return existingSampleNames;
		} catch (SQLException e) {
			logger.error("Sql error getting existing sample names.");
			throw new H2DataAccessException("Sql error getting existing sample names.");
		}
	}

	/**
	 * Get a list of samples by their guids
	 * 
	 * @param guids
	 *            ordered list of guids
	 * @return an ordered list of DataSample beans
	 * @throws H2DataAccessException
	 * @throws SQLException
	 */
	public List<DataSample> getSamplesByGuids(String[] guids) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			List<DataSample> samples = new ArrayList<DataSample>();
			for (String guid : guids) {
				samples.add(h2Samples.getSampleByGuid(connection, guid));
			}
			connection.close();
			return samples;
		} catch (SQLException e) {
			logger.error("SQL error getting multiple samples.");
			throw new H2DataAccessException("SQL error getting multiple samples.");
		}
	}

	/**
	 * Gets a given Data Sample bean given its Guid
	 * 
	 * @param guid
	 * @return
	 * @throws H2DataAccessException
	 */
	public DataSample getSampleByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			DataSample sample = new DataSample();
			sample = h2Samples.getSampleByGuid(connection, guid);
			connection.close();
			return sample;
		} catch (SQLException e) {
			logger.error("SQL error getting sample with guid " + guid + ".");
			throw new H2DataAccessException("SQL error getting sample with guid " + guid + ".");
		}
	}

	/**
	 * Gets a Data Sample Meta Data bean given its Guid
	 * 
	 * @param guid
	 * @return
	 * @throws H2DataAccessException
	 */
	public DataSampleMetaData getSampleMetaDataByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			DataSampleMetaData sampleMetaData;
			sampleMetaData = h2Samples.getDataSampleMetaDataByGuid(connection, guid);
			connection.close();
			return sampleMetaData;
		} catch (SQLException e) {
			logger.error("SQL error getting sample metadata for guid " + guid + ".");
			throw new H2DataAccessException("SQL error getting sample metadata for guid " + guid + ".");
		}
	}

	/**
	 * Gets the field-descriptor
	 * 
	 * @param guid
	 * @return
	 * @throws H2DataAccessException
	 */
	public Map<String, Profile> getSampleFieldByGuid(String guid, boolean showHistogram) throws H2DataAccessException {

		try {
			Connection connection = h2Database.getNewConnection();
			Map<String, Profile> map = new HashMap<String, Profile>();
			map = h2Samples.getSampleFieldByGuid(connection, guid);

			if (!showHistogram) {
				for (String key : map.keySet()) {
					Profile profile = map.get(key);
					Detail detail = profile.getDetail();
					if (detail instanceof NumberDetail) {
						NumberDetail nm = ((NumberDetail) Profile.getNumberDetail(profile));
						nm.setFreqHistogram(null);
					} else if (detail instanceof StringDetail) {
						StringDetail sm = ((StringDetail) Profile.getStringDetail(profile));
						sm.setTermFreqHistogram(null);
					} else if (detail instanceof BinaryDetail) {
						logger.error("Detected as binary in " + getClass().getName() + ".");
					}
					profile.setDetail(detail);
				}
			}
			connection.close();
			return map;
		} catch (SQLException e) {
			logger.error("SQL error populating profile for sample " + guid + ".");
			throw new H2DataAccessException("SQL error populating profile for sample " + guid + ".");
		}
	}

	public void deleteSchemaByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			h2Schema.deleteSchemaByGuid(connection, guid);
			connection.close();
		} catch (SQLException e) {
			logger.error("SQL error deleting schema with guid " + guid + ".");
			throw new H2DataAccessException("SQL error deleting schema with guid " + guid + ".");
		}
	}

	public void deleteSampleByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			h2Samples.deleteSampleByGuid(connection, guid);
			connection.close();
		} catch (SQLException e) {
			logger.error("SQL error deleting sample with guid " + guid + ".");
			throw new H2DataAccessException("SQL error deleting sample with guid " + guid + ".");
		}
	}

	/**
	 * Has logic to determine if a GUID is a Schema or Data Sample.
	 * 
	 * @param guid
	 *            An ambiguous GUID belonging to either a Schema or Data Sample
	 * @throws H2DataAccessException
	 */
	public void deleteByGuid(String guid) throws H2DataAccessException {
		try {
			Connection connection = h2Database.getNewConnection();
			Schema schema = h2Schema.getSchemaByGuid(connection, guid);
			DataSample sample = h2Samples.getSampleByGuid(connection, guid);

			if (schema != null) {
				h2Schema.deleteSchemaByGuid(connection, guid);
			} else if (sample != null) {
				h2Samples.deleteSampleByGuid(connection, guid);
			} else {
				connection.close();
				logger.error("No such guid exists in the database.");
				throw new H2DataAccessException("Error finding guid in H2 database");
			}
			connection.close();
		} catch (SQLException e) {
			logger.error("Error finding guid in H2 database");
			throw new H2DataAccessException("Error finding guid in H2 database");
		}
	}

	public static void setH2DAO(H2DataAccessObject h2dao) {
		h2Dao = h2dao;
	}

	public H2MetricsDataAccessObject getH2Metrics() {
		return h2Metrics;
	}

	public H2SampleDataAccessObject getH2Samples() {
		return h2Samples;
	}

	public H2SchemaDataAccessObject getH2Schema() {
		return h2Schema;
	}

	public boolean testConnection(Connection conn) throws SQLException {
		try {
			isLive = conn.isValid(5);
		} catch (SQLException e) {
			isLive = false;
			logger.error(e);
		} finally {
			conn.close();
		}
		return isLive;
	}

	// Used for the health check of H2 from the ServiceLayerAccessor
	public boolean testDefaultConnection() throws SQLException {
		return testConnection(h2Database.getNewConnection());
	}

	public boolean isLive() {
		return isLive;
	}

	public H2Database getH2Database() {
		return h2Database;
	}

	public void setH2Database(H2Database h2Database) {
		this.h2Database = h2Database;
	}
}
