<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Interpretations</title>
        <link href="../../Resources/TableStyles/KBTable1.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Styles.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><span class="MCBreadcrumbs">Interpretations</span>
            </div>
            <h1>Interpretations</h1>
            <p>Schema Wizard provides automated data extraction and statistical analysis. Working with the Interpretation Engine, Schema Wizard assigns domain specific meaning to the data it extracts. Once Schema Wizard has generated metrics representing a data field, The Interpretation Engine utilizes a three phase validation process to offer its interpretation of a field.</p>
            <p>There are 3 phases to of validation for interpretations.</p>
            <p>&#160;</p>
            <p>&#160;</p>
            <p><b>Phase 1 – Constraint Validation</b>
            </p>
            <p>During the first phase of the interpretation process, defined constraints are used to quickly nullify inappropriate interpretations. These constraints are specific to the interpretation, and they are determined when the interpretation is created. One example of a constraint is a maximum value. Consider “heading” in the Transportation domain. A heading is a value that represents the direction an aircraft is moving. Using degrees, a heading falls in the range 0-360. We can therefore say that a heading must have a maximum value of 360. Likewise, any field with a maximum value greater than 360 will not be considered a heading. Each main data type has an associated selection of constraints. The current available constraints are the following:</p>
            <p><b>Number</b>
            </p>
            <li value="9">Maximum Number Distinct Values: the maximum number of distinct values</li>
            <li value="10">Minimum: the minimum possible numerical value</li>
            <li value="11">Maximum: the maximum possible numerical value</li>
            <li value="12">Average: currently unused</li>
            <li value="13">RegEx: a regex that should match all possible values (converted to strings) of this interpretation</li>
            <p><b>String</b>
            </p>
            <li value="14">Number Distinct Values: the maximum number of distinct strings</li>
            <li value="15">Minimum Length: the minimum possible length of the string value</li>
            <li value="16">Maximum Length: the maximum possible length of the string value</li>
            <li value="17">RegEx: a regex that should match all possible values of this interpretation</li>
            <p><b>Binary</b> (in progress) - currently not supported</p>
            <li value="18">Length: the length (in bytes) of the binary object</li>
            <li value="19">Mime Type: the mime type of the binary object</li>
            <li value="20">Hash: the matching MD5 hash of the binary object</li>
            <li value="21">Entropy: the entropy of the byte frequency histogram produced by the object</li>
            <p><b>For each type, disregard the "Quantized," "Ordinal," "Categorical," and "Relational" fields.</b>
            </p>
            <p>Note that an interpretation’s main type and detail type act as constraints as well. The main type and detail type of a field must match that of the proposed interpretation.</p>
            <p><b>Phase 2 – Script Validation</b>
            </p>
            <p>The second phase of the interpretation process allows for more involved user control of interpretations. Using the popular scripting language Python, a data scientist may write a script that the Interpretation Engine will use to interpret data. The script has access to the metrics generated by the field in addition to a list of example values. It returns a Boolean value: “True” if the interpretation is the appropriate interpretation for the field, “False” if it is not. The following section requires a basic knowledge of the Python programming language. A user performs her script editing in the “Validation Script” panel.</p>
            <p>The user must implement the “validateInterpretation(field_profile)” function, which is the entry point into the application code. The signature for this function is automatically generated with a new interpretation, and it is invoked automatically by the application.</p>
            <p>In the validation script, the “field_profile” is passed to validateInterpretation() function. This dictionary contains all the information from Schema Wizard that a user may analyze. Each attribute that is generated may be looked up by its appropriate keyword. If an attribute does not apply to the field, it will not be present in the “field profile” dictionary.</p>
            <p>&#160;</p>
            <table style="border-top-left-radius: 1px;border-top-right-radius: 1px;border-bottom-right-radius: 1px;border-bottom-left-radius: 1px;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;mc-table-style: url('../../Resources/TableStyles/KBTable1.css');" class="TableStyle-KBTable1" cellspacing="0">
                <col style="width: 171px;" class="TableStyle-KBTable1-Column-Regular" />
                <col style="width: 117px;" class="TableStyle-KBTable1-Column-Regular" />
                <col style="width: 146px;" class="TableStyle-KBTable1-Column-Regular" />
                <col class="TableStyle-KBTable1-Column-Regular" />
                <thead>
                    <tr class="TableStyle-KBTable1-Head-Header1">
                        <th align="center" class="TableStyle-KBTable1-HeadE-Regular-Header1" style="color: #ffffff;background-color: #612273;text-decoration: underline;">Keyword</th>
                        <th align="center" class="TableStyle-KBTable1-HeadE-Regular-Header1" style="color: #ffffff;background-color: #612273;text-decoration: underline;">Present for type</th>
                        <th align="center" class="TableStyle-KBTable1-HeadE-Regular-Header1" style="color: #ffffff;background-color: #612273;text-decoration: underline;"><a href="../../Resources/MasterPages/KB_Secondary.htm" style="color: #ffffff;">Value Type</a>
                        </th>
                        <th align="center" class="TableStyle-KBTable1-HeadD-Regular-Header1" style="color: #ffffff;background-color: #612273;text-decoration: underline;">Value Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">main_type</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">All</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">“number”, “string”</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">detail_type</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">All</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-DarkerRows">“integer”, “decimal”, “exponent”, “boolean”, “term”, “phrase”</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">example_values</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">All</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">List</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">A list of some unique example values found in the data sample.  If the sample has more than 100 distinct values, Schema Wizard will attempt to populate this list with an even distribution of values across the sample.</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">num_distinct_values</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">All</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Integer</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-DarkerRows">Number of distinct values found for the number</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">number_min</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Number</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Integer or Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">The minimum numerical value</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">number_max</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Number</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Integer or Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-DarkerRows">The maximum numerical value</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">number_average</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Number</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Integer or Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">The average of all numerical values in the sample</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">number_std_dev</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Number</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-DarkerRows">The standard deviation of the values</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">string_min_len</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Integer</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">The minimum length of all the string values</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">string_max_len</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-DarkerRows">Integer</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-DarkerRows">The maximum length of all the string values</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-LightRows">
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">string_average_len</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyE-Regular-LightRows">Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyD-Regular-LightRows">The standard deviation of the length of the string values</td>
                    </tr>
                    <tr class="TableStyle-KBTable1-Body-DarkerRows">
                        <td align="center" class="TableStyle-KBTable1-BodyB-Regular-DarkerRows">string_std_dev_len</td>
                        <td align="center" class="TableStyle-KBTable1-BodyB-Regular-DarkerRows">String</td>
                        <td align="center" class="TableStyle-KBTable1-BodyB-Regular-DarkerRows">Float</td>
                        <td align="center" class="TableStyle-KBTable1-BodyA-Regular-DarkerRows">The average of the length of the string values</td>
                    </tr>
                </tbody>
            </table>
            <p>&#160;</p>
            <p><b>Phase 3 – Name Matching Validation</b>
            </p>
            <p>The final effort to interpret a data field is the name matching phase. This phase compares the extracted field name to a list of possible names that the interpretation may represent. For example, the “latitude” interpretation will appear in some data samples as “lat.” If a data scientist becomes aware of a significantly different naming possibility for a field, he may add the name to the list of matching names in the interpretation.</p>
            <p>Though an exact match will benefit the Interpretation Engine’s confidence in assigning interpretations, it is not required. The name matching phase uses the Jaro-Winkler string matching algorithm. This algorithm generates a “distance” between two strings, which ultimately represents (on a scale of 0-1) how similar the strings are. The Interpretation Engine performs this function on all possible names, and it returns an ordered list of matches that exceed 70% confidence. With this plug-ability, the user should be able to define custom interpretations in her data sets.</p>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <p class="copyright">Copyright © <span class="MyVariablesYear">2016</span>&#160;<span class="MyVariablesCompanyName">Leidos, Inc.</span> All rights reserved.</p>
        </div>
    </body>
</html>